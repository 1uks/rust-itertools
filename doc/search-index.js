var searchIndex = {};
searchIndex['itertools'] = {"items":[[0,"","itertools","Itertools — extra iterator adaptors, functions and macros"],[1,"Interleave","","Alternate elements from two iterators until both\nare run out"],[1,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`."],[1,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator."],[1,"FnMap","","Clonable iterator adaptor to map elementwise\nfrom `Iterator<A>` to `Iterator<B>`"],[1,"Dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique."],[1,"Batching","","An advanced iterator adaptor. The closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element."],[1,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator."],[1,"MapMut","","Clonable iterator adaptor to map elementwise\nfrom `Iterator<A>` to `Iterator<B>`"],[1,"Stride","","Stride is similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration."],[1,"StrideMut","","StrideMut is like Stride, but with mutable elements."],[1,"Times","","Iterator to repeat a simple number of times"],[1,"ZipLongest","","An iterator which iterates two other iterators simultaneously"],[1,"FlatTuples","",""],[11,"iter","","",0],[2,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values,\ndepending on which of the input iterators are exhausted."],[12,"Both","","Neither input iterator is exhausted yet, yielding two values.",1],[12,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",1],[12,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",1],[3,"times","","Return an iterator with `n` elements, for simple repetition\na particular number of times. The iterator yields a counter."],[3,"linspace","","Return an iterator with `n` elements, where the first\nelement is `a` and the last element is `b`."],[3,"write","","Assign to each reference in `to` from `from`, stopping\nat the shortest of the two iterators."],[10,"clone","","",2],[10,"new","","",2],[10,"next","","",2],[10,"new","","",3],[10,"next","","",3],[10,"size_hint","","",3],[10,"next_back","","",3],[10,"clone","","",3],[10,"clone","","",4],[10,"new","","Iterator element type is `A`",4],[10,"put_back","","Put back a single value to the front of the iterator.",4],[10,"next","","",4],[10,"size_hint","","",4],[10,"clone","","",5],[10,"new","","Create a new cartesian product iterator",5],[10,"next","","",5],[10,"size_hint","","",5],[10,"clone","","",6],[10,"new","","Create a new Dedup Iterator.",6],[10,"next","","",6],[10,"size_hint","","",6],[10,"clone","","",7],[10,"new","","Create a new Batching iterator.",7],[10,"next","","",7],[10,"size_hint","","",7],[10,"clone","","",8],[10,"new","","Create a new Intersperse iterator",8],[10,"next","","",8],[10,"size_hint","","",8],[10,"new","","",9],[10,"next","","",9],[10,"size_hint","","",9],[10,"next_back","","",9],[10,"clone","","",9],[10,"from_ptr_len","","Create a Stride iterator from a raw pointer.",10],[10,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",11],[10,"from_slice","","Create Stride iterator from a slice and the element step count.",10],[10,"from_stride","","Create Stride iterator from an existing Stride iterator",10],[10,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",10],[10,"len","","Return the number of elements in the iterator.",10],[10,"next","","",10],[10,"size_hint","","",10],[10,"next_back","","",10],[10,"index","","Return a reference to the element at a given index.",10],[10,"fmt","","",10],[10,"from_slice","","Create Stride iterator from a slice and the element step count.",11],[10,"from_stride","","Create Stride iterator from an existing Stride iterator",11],[10,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",11],[10,"len","","Return the number of elements in the iterator.",11],[10,"next","","",11],[10,"size_hint","","",11],[10,"next_back","","",11],[10,"index","","Return a reference to the element at a given index.",11],[10,"fmt","","",11],[10,"clone","","",10],[10,"index_mut","","Return a mutable reference to the element at a given index.",11],[10,"clone","","",12],[10,"next","","",12],[10,"size_hint","","",12],[10,"next_back","","",12],[10,"clone","","",13],[10,"new","","Create a new ZipLongest iterator.",13],[10,"next","","",13],[10,"size_hint","","",13],[10,"next_back","","",13],[10,"indexable","","",13],[10,"idx","","",13],[10,"fmt","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[4,"Linspace","","An iterator of `n` evenly spaced floats.\n \nIterator element type is `F`."],[6,"Itertools","","Extra iterator methods for arbitrary iterators"],[10,"fn_map","","Like regular `.map`, but using a simple function pointer instead,\nso that the resulting `FnMap` iterator value can be cloned.",14],[10,"map_unboxed","","Like regular `.map`, but using an unboxed closure instead.",14],[10,"interleave","","Alternate elements from two iterators until both\nare run out",14],[10,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",14],[10,"zip_longest","","Creates an iterator which iterates over both this and the specified\niterators simultaneously, yielding pairs of two optional elements.\nWhen both iterators return None, all further invocations of next() will\nreturn None.",14],[10,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",14],[10,"batching","","An advanced iterator adaptor. The closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",14],[10,"dropn","","Consume `n` elements of the iterator eagerly",14],[10,"drain","","Run the iterator, eagerly, to the end and consume all its elements.",14],[10,"apply","","Run the closure `f` eagerly on each element of the iterator.",14],[10,"clone","","",0],[10,"next","","",0],[10,"size_hint","","",0],[10,"next_back","","",0],[15,"iproduct!","","Create an iterator over the “cartesian product” of iterators."],[15,"izip!","","Create an iterator running multiple iterators in lockstep."],[15,"icompr!","","`icompr` as in “iterator comprehension” allows creating a\nmapped iterator with simple syntax, similar to set builder notation,\nand directly inspired by Python. Supports an optional filter clause.\n \nSyntax:\n \n `icompr!(<expression> for <pattern> in <iterator>)`"]],"paths":[[1,"FlatTuples"],[2,"EitherOrBoth"],[1,"Interleave"],[1,"FnMap"],[1,"PutBack"],[1,"Product"],[1,"Dedup"],[1,"Batching"],[1,"Intersperse"],[1,"MapMut"],[1,"Stride"],[1,"StrideMut"],[1,"Times"],[1,"ZipLongest"],[6,"Itertools"]]};
initSearch(searchIndex);
